#ifndef GAME_APPLICATION_H
#define GAME_APPLICATION_H

#pragma once

#include "RGE/Core.h"
#include "RGE/Application.h"
#include "RGE/Sprite.h"
#include "RGE/Archive.h"

class CGameApplication : public Engine::CApplication
{
	vector<int> m_Map = { 
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	};

	vector<int> m_ExampleLogo = {
		0,1,1,0,0,0,1,1,0,0,1,1,1,1,
		1,0,1,0,0,1,0,0,1,0,1,0,0,0,
		1,0,1,0,0,1,0,0,0,0,1,1,1,1,
		1,1,1,0,0,1,0,1,1,0,1,0,0,0,
		1,0,0,1,0,1,0,0,1,0,1,0,0,0,
		1,0,0,1,0,0,1,1,1,0,1,1,1,1,
	};

	vector<int> m_ExampleLogoFrame1 = {
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,1,0,0,0,
		0,0,0,0,0,0,0,1,0,0,1,0,0,0,
		0,0,0,1,0,0,1,0,0,0,0,1,0,0,
		1,0,0,1,0,0,1,1,1,0,1,1,1,1,
	};

	vector<int> m_ExampleLogoFrame2 = {
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,1,0,0,0,0,
		0,0,0,0,0,0,0,1,0,0,1,0,0,0,
		0,0,0,1,0,0,0,1,0,0,0,0,0,0,
		0,0,0,1,0,0,1,0,0,0,0,1,0,0,
		1,0,0,1,0,0,1,1,1,0,1,1,1,1,
	};

	vector<int> m_ExampleLogoFrame3 = {
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,1,0,1,0,0,0,0,1,0,0,0,0,
		0,1,0,1,0,0,0,1,0,0,1,0,0,0,
		0,0,0,1,0,1,0,1,0,0,0,0,0,0,
		0,0,0,1,0,0,1,0,0,0,0,1,0,0,
		1,0,0,1,0,0,1,1,1,0,1,1,1,1,
	};

	enum EGameSate
	{
		STATE_MENU,
		STATE_GAME,
		STATE_EDITOR
	};

	enum EMenuSate
	{
		STATE_MENU_NEW_GAME = 0,
		STATE_MENU_EDITOR,
		STATE_MENU_EXIT_GAME,
	};

	EGameSate m_GameState;
	int m_MenuState;

	Engine::CColor m_MenuSelectedColor;
	Engine::CColor m_MenuTextColor;

	int m_MapWidth = 32;
	int m_MapHeight = 32;

	Engine::CPoint m_PlayerPosition;
	Engine::CPoint m_ScrollPosition;
	string m_TimerValue;
	float m_FrameTime = 0.0f;
	int m_Frame = 0;

	Engine::CSprite *m_pCurrentEditorSprite = NULL;

	void DrawMap(const vector<int> &Chunk, int ChunkWidth, int ChunkHeight);
	void Draw();

	bool IsCanMove(const Engine::CPoint &Position, const vector<int> &Chunk, int ChunkWidth, int ChunkHeight);

	void UpdateMenu();
	void RenderMenu();
	void UpdateEditor(double Time, double TimeDelta);
	void RenderEditor();

public:

	CGameApplication(const Engine::CPoint &WindowSize, const string &WindowTitle);
	~CGameApplication();

	void OnUpdate(double Time, double TimeDelta) override;
	void OnRender() override;
};

#endif GAME_APPLICATION_H

